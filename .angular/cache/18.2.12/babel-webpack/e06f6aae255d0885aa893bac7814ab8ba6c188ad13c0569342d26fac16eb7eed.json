{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Firestore, collection, addDoc, collectionData } from '@angular/fire/firestore';\nimport * as i0 from \"@angular/core\";\nexport class ProviderService {\n  constructor() {\n    /* Inyecte de dependencia AngularFire */\n    this.firestoreService = inject(Firestore);\n  }\n  /* Método para crear un documento en la colección */\n  createDocument(collectionName, data) {\n    const colRef = collection(this.firestoreService, collectionName);\n    return addDoc(colRef, data);\n  }\n  readCollection(collectionName) {\n    const colRef = collection(this.firestoreService, collectionName);\n    return collectionData(colRef, {\n      idField: 'id'\n    });\n  }\n  static {\n    this.ɵfac = function ProviderService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ProviderService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProviderService,\n      factory: ProviderService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["inject","Firestore","collection","addDoc","collectionData","ProviderService","constructor","firestoreService","createDocument","collectionName","data","colRef","readCollection","idField","factory","ɵfac","providedIn"],"sources":["/Users/hailiejimenez/iCloud Drive (Archive)/Desktop/la odiada espol/DAWN/repos/hibridaApp/src/app/services/provider.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { Firestore, collection, addDoc, collectionData } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ProviderService {\n\n  /* Inyecte de dependencia AngularFire */\n  firestoreService = inject(Firestore);\n\n  constructor() { }\n\n  /* Método para crear un documento en la colección */\n  createDocument(collectionName: string, data: any): Promise<any> {\n    const colRef = collection(this.firestoreService, collectionName);\n    return addDoc(colRef, data);\n  }\n\n  readCollection(collectionName: string): Observable<any[]> {\n    const colRef = collection(this.firestoreService, collectionName);\n    return collectionData(colRef, { idField: 'id' });\n  }\n\n  \n}"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAASC,SAAS,EAAEC,UAAU,EAAEC,MAAM,EAAEC,cAAc,QAAQ,yBAAyB;;AAOvF,OAAM,MAAOC,eAAe;EAK1BC,YAAA;IAHA;IACA,KAAAC,gBAAgB,GAAGP,MAAM,CAACC,SAAS,CAAC;EAEpB;EAEhB;EACAO,cAAcA,CAACC,cAAsB,EAAEC,IAAS;IAC9C,MAAMC,MAAM,GAAGT,UAAU,CAAC,IAAI,CAACK,gBAAgB,EAAEE,cAAc,CAAC;IAChE,OAAON,MAAM,CAACQ,MAAM,EAAED,IAAI,CAAC;EAC7B;EAEAE,cAAcA,CAACH,cAAsB;IACnC,MAAME,MAAM,GAAGT,UAAU,CAAC,IAAI,CAACK,gBAAgB,EAAEE,cAAc,CAAC;IAChE,OAAOL,cAAc,CAACO,MAAM,EAAE;MAAEE,OAAO,EAAE;IAAI,CAAE,CAAC;EAClD;;;uCAhBWR,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAS,OAAA,EAAfT,eAAe,CAAAU,IAAA;MAAAC,UAAA,EAHd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}