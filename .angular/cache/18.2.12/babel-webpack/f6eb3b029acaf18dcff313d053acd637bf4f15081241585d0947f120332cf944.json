{"ast":null,"code":"import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵAppCheckInstances as _AppCheckInstances, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { collectionChanges as collectionChanges$1, collection as collection$1, sortedChanges as sortedChanges$1, auditTrail as auditTrail$1, collectionData as collectionData$1, collectionCountSnap as collectionCountSnap$1, collectionCount as collectionCount$1, doc as doc$1, docData as docData$1, snapToData as snapToData$1, fromRef as fromRef$1 } from 'rxfire/firestore';\nimport { addDoc as addDoc$1, aggregateFieldEqual as aggregateFieldEqual$1, aggregateQuerySnapshotEqual as aggregateQuerySnapshotEqual$1, and as and$1, arrayRemove as arrayRemove$1, arrayUnion as arrayUnion$1, average as average$1, clearIndexedDbPersistence as clearIndexedDbPersistence$1, collection as collection$2, collectionGroup as collectionGroup$1, connectFirestoreEmulator as connectFirestoreEmulator$1, count as count$1, deleteAllPersistentCacheIndexes as deleteAllPersistentCacheIndexes$1, deleteDoc as deleteDoc$1, deleteField as deleteField$1, disableNetwork as disableNetwork$1, disablePersistentCacheIndexAutoCreation as disablePersistentCacheIndexAutoCreation$1, doc as doc$2, documentId as documentId$1, enableIndexedDbPersistence as enableIndexedDbPersistence$1, enableMultiTabIndexedDbPersistence as enableMultiTabIndexedDbPersistence$1, enableNetwork as enableNetwork$1, enablePersistentCacheIndexAutoCreation as enablePersistentCacheIndexAutoCreation$1, endAt as endAt$1, endBefore as endBefore$1, getAggregateFromServer as getAggregateFromServer$1, getCountFromServer as getCountFromServer$1, getDoc as getDoc$1, getDocFromCache as getDocFromCache$1, getDocFromServer as getDocFromServer$1, getDocs as getDocs$1, getDocsFromCache as getDocsFromCache$1, getDocsFromServer as getDocsFromServer$1, getFirestore as getFirestore$1, getPersistentCacheIndexManager as getPersistentCacheIndexManager$1, increment as increment$1, initializeFirestore as initializeFirestore$1, limit as limit$1, limitToLast as limitToLast$1, loadBundle as loadBundle$1, memoryEagerGarbageCollector as memoryEagerGarbageCollector$1, memoryLocalCache as memoryLocalCache$1, memoryLruGarbageCollector as memoryLruGarbageCollector$1, namedQuery as namedQuery$1, onSnapshot as onSnapshot$1, onSnapshotsInSync as onSnapshotsInSync$1, or as or$1, orderBy as orderBy$1, persistentLocalCache as persistentLocalCache$1, persistentMultipleTabManager as persistentMultipleTabManager$1, persistentSingleTabManager as persistentSingleTabManager$1, query as query$1, queryEqual as queryEqual$1, refEqual as refEqual$1, runTransaction as runTransaction$1, serverTimestamp as serverTimestamp$1, setDoc as setDoc$1, setIndexConfiguration as setIndexConfiguration$1, setLogLevel as setLogLevel$1, snapshotEqual as snapshotEqual$1, startAfter as startAfter$1, startAt as startAt$1, sum as sum$1, terminate as terminate$1, updateDoc as updateDoc$1, waitForPendingWrites as waitForPendingWrites$1, where as where$1, writeBatch as writeBatch$1 } from 'firebase/firestore';\nexport * from 'firebase/firestore';\nclass Firestore {\n  constructor(firestore) {\n    return firestore;\n  }\n}\nconst FIRESTORE_PROVIDER_NAME = 'firestore';\nclass FirestoreInstances {\n  constructor() {\n    return _getAllInstancesOf(FIRESTORE_PROVIDER_NAME);\n  }\n}\nconst firestoreInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(FIRESTORE_PROVIDER_NAME))), distinct());\nconst PROVIDED_FIRESTORE_INSTANCES = new InjectionToken('angularfire2.firestore-instances');\nfunction defaultFirestoreInstanceFactory(provided, defaultApp) {\n  const defaultFirestore = _getDefaultInstanceOf(FIRESTORE_PROVIDER_NAME, provided, defaultApp);\n  return defaultFirestore && new Firestore(defaultFirestore);\n}\nfunction firestoreInstanceFactory(fn) {\n  return (zone, injector) => {\n    const firestore = zone.runOutsideAngular(() => fn(injector));\n    return new Firestore(firestore);\n  };\n}\nconst FIRESTORE_INSTANCES_PROVIDER = {\n  provide: FirestoreInstances,\n  deps: [[new Optional(), PROVIDED_FIRESTORE_INSTANCES]]\n};\nconst DEFAULT_FIRESTORE_INSTANCE_PROVIDER = {\n  provide: Firestore,\n  useFactory: defaultFirestoreInstanceFactory,\n  deps: [[new Optional(), PROVIDED_FIRESTORE_INSTANCES], FirebaseApp]\n};\nclass FirestoreModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'fst');\n  }\n  static ɵfac = function FirestoreModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FirestoreModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FirestoreModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_FIRESTORE_INSTANCE_PROVIDER, FIRESTORE_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FirestoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_FIRESTORE_INSTANCE_PROVIDER, FIRESTORE_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideFirestore(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'fst');\n  return makeEnvironmentProviders([DEFAULT_FIRESTORE_INSTANCE_PROVIDER, FIRESTORE_INSTANCES_PROVIDER, {\n    provide: PROVIDED_FIRESTORE_INSTANCES,\n    useFactory: firestoreInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, _AngularFireSchedulers, FirebaseApps,\n    // Firestore+Auth work better if Auth is loaded first\n    [new Optional(), AuthInstances], [new Optional(), _AppCheckInstances], ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst collectionChanges = _zoneWrap(collectionChanges$1, true);\nconst collectionSnapshots = _zoneWrap(collection$1, true);\nconst sortedChanges = _zoneWrap(sortedChanges$1, true);\nconst auditTrail = _zoneWrap(auditTrail$1, true);\nconst collectionData = _zoneWrap(collectionData$1, true);\nconst collectionCountSnap = _zoneWrap(collectionCountSnap$1, true);\nconst collectionCount = _zoneWrap(collectionCount$1, true);\nconst docSnapshots = _zoneWrap(doc$1, true);\nconst docData = _zoneWrap(docData$1, true);\nconst snapToData = _zoneWrap(snapToData$1, true);\nconst fromRef = _zoneWrap(fromRef$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst addDoc = _zoneWrap(addDoc$1, true);\nconst aggregateFieldEqual = _zoneWrap(aggregateFieldEqual$1, true);\nconst aggregateQuerySnapshotEqual = _zoneWrap(aggregateQuerySnapshotEqual$1, true);\nconst and = _zoneWrap(and$1, true);\nconst arrayRemove = _zoneWrap(arrayRemove$1, true);\nconst arrayUnion = _zoneWrap(arrayUnion$1, true);\nconst average = _zoneWrap(average$1, true);\nconst clearIndexedDbPersistence = _zoneWrap(clearIndexedDbPersistence$1, true);\nconst collection = _zoneWrap(collection$2, true);\nconst collectionGroup = _zoneWrap(collectionGroup$1, true);\nconst connectFirestoreEmulator = _zoneWrap(connectFirestoreEmulator$1, true);\nconst count = _zoneWrap(count$1, true);\nconst deleteAllPersistentCacheIndexes = _zoneWrap(deleteAllPersistentCacheIndexes$1, true);\nconst deleteDoc = _zoneWrap(deleteDoc$1, true);\nconst deleteField = _zoneWrap(deleteField$1, true);\nconst disableNetwork = _zoneWrap(disableNetwork$1, true);\nconst disablePersistentCacheIndexAutoCreation = _zoneWrap(disablePersistentCacheIndexAutoCreation$1, true);\nconst doc = _zoneWrap(doc$2, true);\nconst documentId = _zoneWrap(documentId$1, true);\nconst enableIndexedDbPersistence = _zoneWrap(enableIndexedDbPersistence$1, true);\nconst enableMultiTabIndexedDbPersistence = _zoneWrap(enableMultiTabIndexedDbPersistence$1, true);\nconst enableNetwork = _zoneWrap(enableNetwork$1, true);\nconst enablePersistentCacheIndexAutoCreation = _zoneWrap(enablePersistentCacheIndexAutoCreation$1, true);\nconst endAt = _zoneWrap(endAt$1, true);\nconst endBefore = _zoneWrap(endBefore$1, true);\nconst getAggregateFromServer = _zoneWrap(getAggregateFromServer$1, true);\nconst getCountFromServer = _zoneWrap(getCountFromServer$1, true);\nconst getDoc = _zoneWrap(getDoc$1, true);\nconst getDocFromCache = _zoneWrap(getDocFromCache$1, true);\nconst getDocFromServer = _zoneWrap(getDocFromServer$1, true);\nconst getDocs = _zoneWrap(getDocs$1, true);\nconst getDocsFromCache = _zoneWrap(getDocsFromCache$1, true);\nconst getDocsFromServer = _zoneWrap(getDocsFromServer$1, true);\nconst getFirestore = _zoneWrap(getFirestore$1, true);\nconst getPersistentCacheIndexManager = _zoneWrap(getPersistentCacheIndexManager$1, true);\nconst increment = _zoneWrap(increment$1, true);\nconst initializeFirestore = _zoneWrap(initializeFirestore$1, true);\nconst limit = _zoneWrap(limit$1, true);\nconst limitToLast = _zoneWrap(limitToLast$1, true);\nconst loadBundle = _zoneWrap(loadBundle$1, true);\nconst memoryEagerGarbageCollector = _zoneWrap(memoryEagerGarbageCollector$1, true);\nconst memoryLocalCache = _zoneWrap(memoryLocalCache$1, true);\nconst memoryLruGarbageCollector = _zoneWrap(memoryLruGarbageCollector$1, true);\nconst namedQuery = _zoneWrap(namedQuery$1, true);\nconst onSnapshot = _zoneWrap(onSnapshot$1, true);\nconst onSnapshotsInSync = _zoneWrap(onSnapshotsInSync$1, true);\nconst or = _zoneWrap(or$1, true);\nconst orderBy = _zoneWrap(orderBy$1, true);\nconst persistentLocalCache = _zoneWrap(persistentLocalCache$1, true);\nconst persistentMultipleTabManager = _zoneWrap(persistentMultipleTabManager$1, true);\nconst persistentSingleTabManager = _zoneWrap(persistentSingleTabManager$1, true);\nconst query = _zoneWrap(query$1, true);\nconst queryEqual = _zoneWrap(queryEqual$1, true);\nconst refEqual = _zoneWrap(refEqual$1, true);\nconst runTransaction = _zoneWrap(runTransaction$1, true);\nconst serverTimestamp = _zoneWrap(serverTimestamp$1, true);\nconst setDoc = _zoneWrap(setDoc$1, true);\nconst setIndexConfiguration = _zoneWrap(setIndexConfiguration$1, true);\nconst setLogLevel = _zoneWrap(setLogLevel$1, true);\nconst snapshotEqual = _zoneWrap(snapshotEqual$1, true);\nconst startAfter = _zoneWrap(startAfter$1, true);\nconst startAt = _zoneWrap(startAt$1, true);\nconst sum = _zoneWrap(sum$1, true);\nconst terminate = _zoneWrap(terminate$1, true);\nconst updateDoc = _zoneWrap(updateDoc$1, true);\nconst waitForPendingWrites = _zoneWrap(waitForPendingWrites$1, true);\nconst where = _zoneWrap(where$1, true);\nconst writeBatch = _zoneWrap(writeBatch$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Firestore, FirestoreInstances, FirestoreModule, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, arrayRemove, arrayUnion, auditTrail, average, clearIndexedDbPersistence, collection, collectionChanges, collectionCount, collectionCountSnap, collectionData, collectionGroup, collectionSnapshots, connectFirestoreEmulator, count, deleteAllPersistentCacheIndexes, deleteDoc, deleteField, disableNetwork, disablePersistentCacheIndexAutoCreation, doc, docData, docSnapshots, documentId, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, enableNetwork, enablePersistentCacheIndexAutoCreation, endAt, endBefore, firestoreInstance$, fromRef, getAggregateFromServer, getCountFromServer, getDoc, getDocFromCache, getDocFromServer, getDocs, getDocsFromCache, getDocsFromServer, getFirestore, getPersistentCacheIndexManager, increment, initializeFirestore, limit, limitToLast, loadBundle, memoryEagerGarbageCollector, memoryLocalCache, memoryLruGarbageCollector, namedQuery, onSnapshot, onSnapshotsInSync, or, orderBy, persistentLocalCache, persistentMultipleTabManager, persistentSingleTabManager, provideFirestore, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setIndexConfiguration, setLogLevel, snapToData, snapshotEqual, sortedChanges, startAfter, startAt, sum, terminate, updateDoc, waitForPendingWrites, where, writeBatch };","map":{"version":3,"names":["ɵgetAllInstancesOf","_getAllInstancesOf","ɵgetDefaultInstanceOf","_getDefaultInstanceOf","VERSION","ɵAngularFireSchedulers","_AngularFireSchedulers","ɵAppCheckInstances","_AppCheckInstances","ɵzoneWrap","_zoneWrap","timer","from","concatMap","distinct","i0","InjectionToken","Optional","NgModule","makeEnvironmentProviders","NgZone","Injector","FirebaseApp","FirebaseApps","AuthInstances","registerVersion","collectionChanges","collectionChanges$1","collection","collection$1","sortedChanges","sortedChanges$1","auditTrail","auditTrail$1","collectionData","collectionData$1","collectionCountSnap","collectionCountSnap$1","collectionCount","collectionCount$1","doc","doc$1","docData","docData$1","snapToData","snapToData$1","fromRef","fromRef$1","addDoc","addDoc$1","aggregateFieldEqual","aggregateFieldEqual$1","aggregateQuerySnapshotEqual","aggregateQuerySnapshotEqual$1","and","and$1","arrayRemove","arrayRemove$1","arrayUnion","arrayUnion$1","average","average$1","clearIndexedDbPersistence","clearIndexedDbPersistence$1","collection$2","collectionGroup","collectionGroup$1","connectFirestoreEmulator","connectFirestoreEmulator$1","count","count$1","deleteAllPersistentCacheIndexes","deleteAllPersistentCacheIndexes$1","deleteDoc","deleteDoc$1","deleteField","deleteField$1","disableNetwork","disableNetwork$1","disablePersistentCacheIndexAutoCreation","disablePersistentCacheIndexAutoCreation$1","doc$2","documentId","documentId$1","enableIndexedDbPersistence","enableIndexedDbPersistence$1","enableMultiTabIndexedDbPersistence","enableMultiTabIndexedDbPersistence$1","enableNetwork","enableNetwork$1","enablePersistentCacheIndexAutoCreation","enablePersistentCacheIndexAutoCreation$1","endAt","endAt$1","endBefore","endBefore$1","getAggregateFromServer","getAggregateFromServer$1","getCountFromServer","getCountFromServer$1","getDoc","getDoc$1","getDocFromCache","getDocFromCache$1","getDocFromServer","getDocFromServer$1","getDocs","getDocs$1","getDocsFromCache","getDocsFromCache$1","getDocsFromServer","getDocsFromServer$1","getFirestore","getFirestore$1","getPersistentCacheIndexManager","getPersistentCacheIndexManager$1","increment","increment$1","initializeFirestore","initializeFirestore$1","limit","limit$1","limitToLast","limitToLast$1","loadBundle","loadBundle$1","memoryEagerGarbageCollector","memoryEagerGarbageCollector$1","memoryLocalCache","memoryLocalCache$1","memoryLruGarbageCollector","memoryLruGarbageCollector$1","namedQuery","namedQuery$1","onSnapshot","onSnapshot$1","onSnapshotsInSync","onSnapshotsInSync$1","or","or$1","orderBy","orderBy$1","persistentLocalCache","persistentLocalCache$1","persistentMultipleTabManager","persistentMultipleTabManager$1","persistentSingleTabManager","persistentSingleTabManager$1","query","query$1","queryEqual","queryEqual$1","refEqual","refEqual$1","runTransaction","runTransaction$1","serverTimestamp","serverTimestamp$1","setDoc","setDoc$1","setIndexConfiguration","setIndexConfiguration$1","setLogLevel","setLogLevel$1","snapshotEqual","snapshotEqual$1","startAfter","startAfter$1","startAt","startAt$1","sum","sum$1","terminate","terminate$1","updateDoc","updateDoc$1","waitForPendingWrites","waitForPendingWrites$1","where","where$1","writeBatch","writeBatch$1","Firestore","constructor","firestore","FIRESTORE_PROVIDER_NAME","FirestoreInstances","firestoreInstance$","pipe","PROVIDED_FIRESTORE_INSTANCES","defaultFirestoreInstanceFactory","provided","defaultApp","defaultFirestore","firestoreInstanceFactory","fn","zone","injector","runOutsideAngular","FIRESTORE_INSTANCES_PROVIDER","provide","deps","DEFAULT_FIRESTORE_INSTANCE_PROVIDER","useFactory","FirestoreModule","full","ɵfac","FirestoreModule_Factory","__ngFactoryType__","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","providers","ngDevMode","ɵsetClassMetadata","args","provideFirestore","multi","collectionSnapshots","docSnapshots"],"sources":["/Users/hailiejimenez/iCloud Drive (Archive)/Desktop/la odiada espol/DAWN/repos/hibridaApp/node_modules/@angular/fire/fesm2022/angular-fire-firestore.mjs"],"sourcesContent":["import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵAppCheckInstances as _AppCheckInstances, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { collectionChanges as collectionChanges$1, collection as collection$1, sortedChanges as sortedChanges$1, auditTrail as auditTrail$1, collectionData as collectionData$1, collectionCountSnap as collectionCountSnap$1, collectionCount as collectionCount$1, doc as doc$1, docData as docData$1, snapToData as snapToData$1, fromRef as fromRef$1 } from 'rxfire/firestore';\nimport { addDoc as addDoc$1, aggregateFieldEqual as aggregateFieldEqual$1, aggregateQuerySnapshotEqual as aggregateQuerySnapshotEqual$1, and as and$1, arrayRemove as arrayRemove$1, arrayUnion as arrayUnion$1, average as average$1, clearIndexedDbPersistence as clearIndexedDbPersistence$1, collection as collection$2, collectionGroup as collectionGroup$1, connectFirestoreEmulator as connectFirestoreEmulator$1, count as count$1, deleteAllPersistentCacheIndexes as deleteAllPersistentCacheIndexes$1, deleteDoc as deleteDoc$1, deleteField as deleteField$1, disableNetwork as disableNetwork$1, disablePersistentCacheIndexAutoCreation as disablePersistentCacheIndexAutoCreation$1, doc as doc$2, documentId as documentId$1, enableIndexedDbPersistence as enableIndexedDbPersistence$1, enableMultiTabIndexedDbPersistence as enableMultiTabIndexedDbPersistence$1, enableNetwork as enableNetwork$1, enablePersistentCacheIndexAutoCreation as enablePersistentCacheIndexAutoCreation$1, endAt as endAt$1, endBefore as endBefore$1, getAggregateFromServer as getAggregateFromServer$1, getCountFromServer as getCountFromServer$1, getDoc as getDoc$1, getDocFromCache as getDocFromCache$1, getDocFromServer as getDocFromServer$1, getDocs as getDocs$1, getDocsFromCache as getDocsFromCache$1, getDocsFromServer as getDocsFromServer$1, getFirestore as getFirestore$1, getPersistentCacheIndexManager as getPersistentCacheIndexManager$1, increment as increment$1, initializeFirestore as initializeFirestore$1, limit as limit$1, limitToLast as limitToLast$1, loadBundle as loadBundle$1, memoryEagerGarbageCollector as memoryEagerGarbageCollector$1, memoryLocalCache as memoryLocalCache$1, memoryLruGarbageCollector as memoryLruGarbageCollector$1, namedQuery as namedQuery$1, onSnapshot as onSnapshot$1, onSnapshotsInSync as onSnapshotsInSync$1, or as or$1, orderBy as orderBy$1, persistentLocalCache as persistentLocalCache$1, persistentMultipleTabManager as persistentMultipleTabManager$1, persistentSingleTabManager as persistentSingleTabManager$1, query as query$1, queryEqual as queryEqual$1, refEqual as refEqual$1, runTransaction as runTransaction$1, serverTimestamp as serverTimestamp$1, setDoc as setDoc$1, setIndexConfiguration as setIndexConfiguration$1, setLogLevel as setLogLevel$1, snapshotEqual as snapshotEqual$1, startAfter as startAfter$1, startAt as startAt$1, sum as sum$1, terminate as terminate$1, updateDoc as updateDoc$1, waitForPendingWrites as waitForPendingWrites$1, where as where$1, writeBatch as writeBatch$1 } from 'firebase/firestore';\nexport * from 'firebase/firestore';\n\nclass Firestore {\n    constructor(firestore) {\n        return firestore;\n    }\n}\nconst FIRESTORE_PROVIDER_NAME = 'firestore';\nclass FirestoreInstances {\n    constructor() {\n        return _getAllInstancesOf(FIRESTORE_PROVIDER_NAME);\n    }\n}\nconst firestoreInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(FIRESTORE_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_FIRESTORE_INSTANCES = new InjectionToken('angularfire2.firestore-instances');\nfunction defaultFirestoreInstanceFactory(provided, defaultApp) {\n    const defaultFirestore = _getDefaultInstanceOf(FIRESTORE_PROVIDER_NAME, provided, defaultApp);\n    return defaultFirestore && new Firestore(defaultFirestore);\n}\nfunction firestoreInstanceFactory(fn) {\n    return (zone, injector) => {\n        const firestore = zone.runOutsideAngular(() => fn(injector));\n        return new Firestore(firestore);\n    };\n}\nconst FIRESTORE_INSTANCES_PROVIDER = {\n    provide: FirestoreInstances,\n    deps: [\n        [new Optional(), PROVIDED_FIRESTORE_INSTANCES],\n    ]\n};\nconst DEFAULT_FIRESTORE_INSTANCE_PROVIDER = {\n    provide: Firestore,\n    useFactory: defaultFirestoreInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_FIRESTORE_INSTANCES],\n        FirebaseApp,\n    ]\n};\nclass FirestoreModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'fst');\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: FirestoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: FirestoreModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: FirestoreModule, providers: [\n            DEFAULT_FIRESTORE_INSTANCE_PROVIDER,\n            FIRESTORE_INSTANCES_PROVIDER,\n        ] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: FirestoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_FIRESTORE_INSTANCE_PROVIDER,\n                        FIRESTORE_INSTANCES_PROVIDER,\n                    ]\n                }]\n        }], ctorParameters: () => [] });\nfunction provideFirestore(fn, ...deps) {\n    registerVersion('angularfire', VERSION.full, 'fst');\n    return makeEnvironmentProviders([\n        DEFAULT_FIRESTORE_INSTANCE_PROVIDER,\n        FIRESTORE_INSTANCES_PROVIDER,\n        {\n            provide: PROVIDED_FIRESTORE_INSTANCES,\n            useFactory: firestoreInstanceFactory(fn),\n            multi: true,\n            deps: [\n                NgZone,\n                Injector,\n                _AngularFireSchedulers,\n                FirebaseApps,\n                // Firestore+Auth work better if Auth is loaded first\n                [new Optional(), AuthInstances],\n                [new Optional(), _AppCheckInstances],\n                ...deps,\n            ]\n        }\n    ]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst collectionChanges = _zoneWrap(collectionChanges$1, true);\nconst collectionSnapshots = _zoneWrap(collection$1, true);\nconst sortedChanges = _zoneWrap(sortedChanges$1, true);\nconst auditTrail = _zoneWrap(auditTrail$1, true);\nconst collectionData = _zoneWrap(collectionData$1, true);\nconst collectionCountSnap = _zoneWrap(collectionCountSnap$1, true);\nconst collectionCount = _zoneWrap(collectionCount$1, true);\nconst docSnapshots = _zoneWrap(doc$1, true);\nconst docData = _zoneWrap(docData$1, true);\nconst snapToData = _zoneWrap(snapToData$1, true);\nconst fromRef = _zoneWrap(fromRef$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst addDoc = _zoneWrap(addDoc$1, true);\nconst aggregateFieldEqual = _zoneWrap(aggregateFieldEqual$1, true);\nconst aggregateQuerySnapshotEqual = _zoneWrap(aggregateQuerySnapshotEqual$1, true);\nconst and = _zoneWrap(and$1, true);\nconst arrayRemove = _zoneWrap(arrayRemove$1, true);\nconst arrayUnion = _zoneWrap(arrayUnion$1, true);\nconst average = _zoneWrap(average$1, true);\nconst clearIndexedDbPersistence = _zoneWrap(clearIndexedDbPersistence$1, true);\nconst collection = _zoneWrap(collection$2, true);\nconst collectionGroup = _zoneWrap(collectionGroup$1, true);\nconst connectFirestoreEmulator = _zoneWrap(connectFirestoreEmulator$1, true);\nconst count = _zoneWrap(count$1, true);\nconst deleteAllPersistentCacheIndexes = _zoneWrap(deleteAllPersistentCacheIndexes$1, true);\nconst deleteDoc = _zoneWrap(deleteDoc$1, true);\nconst deleteField = _zoneWrap(deleteField$1, true);\nconst disableNetwork = _zoneWrap(disableNetwork$1, true);\nconst disablePersistentCacheIndexAutoCreation = _zoneWrap(disablePersistentCacheIndexAutoCreation$1, true);\nconst doc = _zoneWrap(doc$2, true);\nconst documentId = _zoneWrap(documentId$1, true);\nconst enableIndexedDbPersistence = _zoneWrap(enableIndexedDbPersistence$1, true);\nconst enableMultiTabIndexedDbPersistence = _zoneWrap(enableMultiTabIndexedDbPersistence$1, true);\nconst enableNetwork = _zoneWrap(enableNetwork$1, true);\nconst enablePersistentCacheIndexAutoCreation = _zoneWrap(enablePersistentCacheIndexAutoCreation$1, true);\nconst endAt = _zoneWrap(endAt$1, true);\nconst endBefore = _zoneWrap(endBefore$1, true);\nconst getAggregateFromServer = _zoneWrap(getAggregateFromServer$1, true);\nconst getCountFromServer = _zoneWrap(getCountFromServer$1, true);\nconst getDoc = _zoneWrap(getDoc$1, true);\nconst getDocFromCache = _zoneWrap(getDocFromCache$1, true);\nconst getDocFromServer = _zoneWrap(getDocFromServer$1, true);\nconst getDocs = _zoneWrap(getDocs$1, true);\nconst getDocsFromCache = _zoneWrap(getDocsFromCache$1, true);\nconst getDocsFromServer = _zoneWrap(getDocsFromServer$1, true);\nconst getFirestore = _zoneWrap(getFirestore$1, true);\nconst getPersistentCacheIndexManager = _zoneWrap(getPersistentCacheIndexManager$1, true);\nconst increment = _zoneWrap(increment$1, true);\nconst initializeFirestore = _zoneWrap(initializeFirestore$1, true);\nconst limit = _zoneWrap(limit$1, true);\nconst limitToLast = _zoneWrap(limitToLast$1, true);\nconst loadBundle = _zoneWrap(loadBundle$1, true);\nconst memoryEagerGarbageCollector = _zoneWrap(memoryEagerGarbageCollector$1, true);\nconst memoryLocalCache = _zoneWrap(memoryLocalCache$1, true);\nconst memoryLruGarbageCollector = _zoneWrap(memoryLruGarbageCollector$1, true);\nconst namedQuery = _zoneWrap(namedQuery$1, true);\nconst onSnapshot = _zoneWrap(onSnapshot$1, true);\nconst onSnapshotsInSync = _zoneWrap(onSnapshotsInSync$1, true);\nconst or = _zoneWrap(or$1, true);\nconst orderBy = _zoneWrap(orderBy$1, true);\nconst persistentLocalCache = _zoneWrap(persistentLocalCache$1, true);\nconst persistentMultipleTabManager = _zoneWrap(persistentMultipleTabManager$1, true);\nconst persistentSingleTabManager = _zoneWrap(persistentSingleTabManager$1, true);\nconst query = _zoneWrap(query$1, true);\nconst queryEqual = _zoneWrap(queryEqual$1, true);\nconst refEqual = _zoneWrap(refEqual$1, true);\nconst runTransaction = _zoneWrap(runTransaction$1, true);\nconst serverTimestamp = _zoneWrap(serverTimestamp$1, true);\nconst setDoc = _zoneWrap(setDoc$1, true);\nconst setIndexConfiguration = _zoneWrap(setIndexConfiguration$1, true);\nconst setLogLevel = _zoneWrap(setLogLevel$1, true);\nconst snapshotEqual = _zoneWrap(snapshotEqual$1, true);\nconst startAfter = _zoneWrap(startAfter$1, true);\nconst startAt = _zoneWrap(startAt$1, true);\nconst sum = _zoneWrap(sum$1, true);\nconst terminate = _zoneWrap(terminate$1, true);\nconst updateDoc = _zoneWrap(updateDoc$1, true);\nconst waitForPendingWrites = _zoneWrap(waitForPendingWrites$1, true);\nconst where = _zoneWrap(where$1, true);\nconst writeBatch = _zoneWrap(writeBatch$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Firestore, FirestoreInstances, FirestoreModule, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, arrayRemove, arrayUnion, auditTrail, average, clearIndexedDbPersistence, collection, collectionChanges, collectionCount, collectionCountSnap, collectionData, collectionGroup, collectionSnapshots, connectFirestoreEmulator, count, deleteAllPersistentCacheIndexes, deleteDoc, deleteField, disableNetwork, disablePersistentCacheIndexAutoCreation, doc, docData, docSnapshots, documentId, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, enableNetwork, enablePersistentCacheIndexAutoCreation, endAt, endBefore, firestoreInstance$, fromRef, getAggregateFromServer, getCountFromServer, getDoc, getDocFromCache, getDocFromServer, getDocs, getDocsFromCache, getDocsFromServer, getFirestore, getPersistentCacheIndexManager, increment, initializeFirestore, limit, limitToLast, loadBundle, memoryEagerGarbageCollector, memoryLocalCache, memoryLruGarbageCollector, namedQuery, onSnapshot, onSnapshotsInSync, or, orderBy, persistentLocalCache, persistentMultipleTabManager, persistentSingleTabManager, provideFirestore, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setIndexConfiguration, setLogLevel, snapToData, snapshotEqual, sortedChanges, startAfter, startAt, sum, terminate, updateDoc, waitForPendingWrites, where, writeBatch };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}